[ocean]
# the number of cells per core to aim for
goal_cells_per_core = 200

# the approximate maximum number of cells per core (the test will fail if too
# few cores are available)
max_cells_per_core = 4500

# config options for manufactured solution testcases
[manufactured_solution]

# the size of the domain in km in the x and y directions
lx = 10000.0

# the coriolis parameter
coriolis_parameter = 1.0e-4

# the amplitude of the sea surface height perturbation
ssh_amplitude = 1.0

# Number of wavelengths in x direction
n_wavelengths_x = 2

# Number of wavelengths in y direction
n_wavelengths_y = 2

# Time step per resolution (s/km), since dt is proportional to resolution
dt_per_km = 3.0

# Convergence threshold below which the test fails
conv_thresh = 1.8

# Run duration in hours
run_duration = 10.0

[vertical_grid]

# The type of vertical grid
grid_type = uniform

# Number of vertical levels
vert_levels = 1

# Depth of the bottom of the ocean
bottom_depth = 1000.0

# The type of vertical coordinate (e.g. z-level, z-star)
coord_type = z-star

# Whether to use "partial" or "full", or "None" to not alter the topography
partial_cell_type = None

# The minimum fraction of a layer for partial cells
min_pc_fraction = 0.1

# config options for spherical convergence tests
[convergence]

base_resolution = 50.
refinement_factors = 4., 2., 1., 0.5
# Evaluation time for convergence analysis (in hours)
convergence_eval_time = ${manufactured_solution:run_duration}

# Convergence threshold below which a test fails
convergence_thresh = ${manufactured_solution:conv_thresh}

# Type of error to compute
error_type = l2


# config options for spherical convergence tests
[convergence_forward]

# time integrator
#  mpas-ocean: {'split_explicit', 'RK4'}
#  omega: {'Forward-Backward', 'RungeKutta4', 'RungeKutta2'}
time_integrator = RK4

# RK4 time step per resolution (s/km), since dt is proportional to resolution
rk4_dt_per_km = ${manufactured_solution:dt_per_km}

# Run duration in hours
run_duration = ${manufactured_solution:run_duration}

# Output interval in hours
output_interval = ${manufactured_solution:run_duration}
